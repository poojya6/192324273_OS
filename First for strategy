#include <stdio.h>

void firstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n]; // Stores block index allocated to a process
    for (int i = 0; i < n; i++) {
        allocation[i] = -1; // Initially, no process is allocated memory
    }

    for (int i = 0; i < n; i++) { // Loop through each process
        for (int j = 0; j < m; j++) { // Loop through each block
            if (blockSize[j] >= processSize[i]) { // Check if block fits
                allocation[i] = j; // Allocate block to process
                blockSize[j] -= processSize[i]; // Reduce available memory in block
                break; // Stop searching after first fit
            }
        }
    }

    // Display allocation result
    printf("\nProcess No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++) {
        printf("   %d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    int m, n;

    // User input for number of memory blocks
    printf("Enter number of memory blocks: ");
    scanf("%d", &m);
    int blockSize[m];

    // Input memory block sizes
    printf("Enter the size of each memory block:\n");
    for (int i = 0; i < m; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSize[i]);
    }

    // User input for number of processes
    printf("\nEnter number of processes: ");
    scanf("%d", &n);
    int processSize[n];

    // Input process sizes
    printf("Enter the size of each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processSize[i]);
    }

    // Run first fit allocation
    printf("\nFirst Fit Memory Allocation:\n");
    firstFit(blockSize, m, processSize, n);

    return 0;
}
