#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <stdlib.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

// Fork semaphores
sem_t forks[NUM_PHILOSOPHERS];

// Function to simulate philosopher's behavior
void *philosopher(void *arg) {
    int id = *((int *)arg);
    int left_fork = id;
    int right_fork = (id + 1) % NUM_PHILOSOPHERS;

    while (1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(rand() % 3 + 1); // Thinking for a random time
        
        printf("Philosopher %d is hungry.\n", id);

        // Try to pick up left and right forks
        sem_wait(&forks[left_fork]);  // Pick up left fork
        printf("Philosopher %d picked up left fork.\n", id);

        sem_wait(&forks[right_fork]); // Pick up right fork
        printf("Philosopher %d picked up right fork.\n", id);

        // Philosopher is eating
        printf("Philosopher %d is eating.\n", id);
        sleep(rand() % 3 + 1); // Eating for a random time
        
        // Put down the forks
        sem_post(&forks[left_fork]);
        printf("Philosopher %d put down left fork.\n", id);
        
        sem_post(&forks[right_fork]);
        printf("Philosopher %d put down right fork.\n", id);
    }

    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];
    
    // Initialize the semaphores for the forks
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&forks[i], 0, 1); // Each fork is initially available (semaphore value = 1)
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_ids[i] = i;
        if (pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]) != 0) {
            perror("Failed to create thread");
            exit(1);
        }
    }

    // Join philosopher threads (this will run forever)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&forks[i]);
    }

    return 0;
}
