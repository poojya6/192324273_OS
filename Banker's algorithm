#include <stdio.h>
#include <stdbool.h>

#define MAX 10  // Maximum number of processes or resources

// Function to check if the system is in a safe state
bool isSafe(int n, int m, int allocation[][MAX], int max[][MAX], int available[], int need[][MAX]) {
    int work[m];
    bool finish[n];
    int safeSeq[n];
    int count = 0;

    // Initialize work and finish arrays
    for (int i = 0; i < m; i++) {
        work[i] = available[i];
    }

    for (int i = 0; i < n; i++) {
        finish[i] = false;
    }

    // Try to find a safe sequence
    while (count < n) {
        bool progressMade = false;

        for (int p = 0; p < n; p++) {
            if (!finish[p]) {
                // Check if process p's need can be satisfied with available resources
                bool canAllocate = true;
                for (int r = 0; r < m; r++) {
                    if (need[p][r] > work[r]) {
                        canAllocate = false;
                        break;
                    }
                }

                // If we can allocate resources to process p
                if (canAllocate) {
                    // Add allocated resources back to work
                    for (int r = 0; r < m; r++) {
                        work[r] += allocation[p][r];
                    }
                    finish[p] = true;
                    safeSeq[count++] = p; // Save the safe sequence
                    progressMade = true;
                    break;
                }
            }
        }

        // If no progress was made, the system is not in a safe state
        if (!progressMade) {
            return false;
        }
    }

    // If we reach here, the system is in a safe state, print safe sequence
    printf("System is in a safe state.\nSafe Sequence: ");
    for (int i = 0; i < n; i++) {
        printf("P%d ", safeSeq[i]);
    }
    printf("\n");

    return true;
}

int main() {
    int n, m;
    int allocation[MAX][MAX], max[MAX][MAX], available[MAX], need[MAX][MAX];

    // Get number of processes and resources
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the number of resources: ");
    scanf("%d", &m);

    // Get the allocation matrix
    printf("\nEnter the Allocation Matrix:\n");
    for (int i = 0; i < n; i++) {
        printf("Process P%d: ", i + 1);
        for (int j = 0; j < m; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }

    // Get the maximum matrix
    printf("\nEnter the Maximum Matrix:\n");
    for (int i = 0; i < n; i++) {
        printf("Process P%d: ", i + 1);
        for (int j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Get the available resources
    printf("\nEnter the Available Resources: ");
    for (int j = 0; j < m; j++) {
        scanf("%d", &available[j]);
    }

    // Calculate the Need matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    // Check if the system is in a safe state
    if (!isSafe(n, m, allocation, max, available, need)) {
        printf("System is not in a safe state.\n");
    }

    return 0;
}

	
